{"ast":null,"code":"import { GLOBALTYPES } from \"./globalTypes\";\nimport { postDataAPI, getDataAPI, patchDataAPI, deleteDataAPI } from \"../../utils/fetchData\";\nimport { imageUpload } from \"../../utils/imageUpload\";\nimport { createNotify, removeNotify } from \"./notifyAction\";\nexport const POST_TYPES = {\n  CREATE_POST: \"CREATE_POST\",\n  LOADING_POST: \"LOADING_POST\",\n  GET_POSTS: \"GET_POSTS\",\n  UPDATE_POST: \"UPDATE_POST\",\n  GET_POST: \"GET_POST\",\n  DELETE_POST: \"DELETE_POST\",\n  REPORT_POST: \"REPORT_POST\",\n  SAVE_POST: \"SAVE_POST\"\n};\nexport const createPost = ({\n  content,\n  contentsub,\n  community,\n  images,\n  auth,\n  socket\n}) => async dispatch => {\n  let media = [];\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (images.length > 0) {\n      media = await imageUpload(images);\n    }\n\n    const res = await postDataAPI(\"posts\", {\n      content,\n      contentsub,\n      community,\n      images: media\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.CREATE_POST,\n      payload: { ...res.data.newPost,\n        user: auth.user\n      }\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: false\n      }\n    }); // todo notification\n\n    const msg = {\n      id: res.data.newPost._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${res.data.newPost._id}`,\n      content,\n      contentsub,\n      community,\n      image: media[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPosts = token => async dispatch => {\n  try {\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: true\n    });\n    const res = await getDataAPI(\"posts\", token);\n    dispatch({\n      type: POST_TYPES.GET_POSTS,\n      payload: { ...res.data,\n        page: 2\n      }\n    });\n    dispatch({\n      type: POST_TYPES.LOADING_POST,\n      payload: false\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const updatePost = ({\n  content,\n  contentsub,\n  community,\n  images,\n  auth,\n  status\n}) => async dispatch => {\n  let media = [];\n  const imgNewUrl = images.filter(img => !img.url);\n  const imgOldUrl = images.filter(img => img.url);\n\n  if (status.content === content && status.contentsub === contentsub && status.community === community && imgNewUrl.length === 0 && imgOldUrl.length === status.images.length) {\n    return;\n  }\n\n  try {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        loading: true\n      }\n    });\n\n    if (imgNewUrl.length > 0) {\n      media = await imageUpload(imgNewUrl);\n    }\n\n    const res = await patchDataAPI(`post/${status._id}`, {\n      content,\n      contentsub,\n      community,\n      images: [...imgOldUrl, ...media]\n    }, auth.token);\n    dispatch({\n      type: POST_TYPES.UPDATE_POST,\n      payload: res.data.newPost\n    });\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: [...post.likes, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      contentsub: post.contentsub,\n      community: post.community,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likes: post.likes.filter(like => like._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikePost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Liked your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likeleftPost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likelefts: [...post.likelefts, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likeleftPost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/likeleft`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Likeleftd your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      contentsub: post.contentsub,\n      community: post.community,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikeleftPost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likelefts: post.likelefts.filter(likeleft => likeleft._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikeleftPost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlikeleft`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Likeleftd your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const likerightPost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likerights: [...post.likerights, auth.user]\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"likerightPost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/likeright`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Likerightd your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`,\n      content: post.content,\n      contentsub: post.contentsub,\n      community: post.community,\n      image: post.images[0].url\n    };\n    dispatch(createNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unLikerightPost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  const newPost = { ...post,\n    likerights: post.likerights.filter(likeright => likeright._id !== auth.user._id)\n  };\n  dispatch({\n    type: POST_TYPES.UPDATE_POST,\n    payload: newPost\n  });\n  socket.emit(\"unLikerightPost\", newPost);\n\n  try {\n    await patchDataAPI(`post/${post._id}/unlikeright`, null, auth.token); // todo notification\n\n    const msg = {\n      id: auth.user._id,\n      text: \"Likerightd your post.\",\n      recipients: [post.user._id],\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const getPost = ({\n  detailPost,\n  id,\n  auth\n}) => async dispatch => {\n  if (detailPost.every(post => post._id !== id)) {\n    try {\n      const res = await getDataAPI(`post/${id}`, auth.token);\n      dispatch({\n        type: POST_TYPES.GET_POST,\n        payload: res.data.post\n      });\n    } catch (err) {\n      dispatch({\n        type: GLOBALTYPES.ALERT,\n        payload: {\n          error: err.response.data.msg\n        }\n      });\n    }\n  }\n};\nexport const deletePost = ({\n  post,\n  auth,\n  socket\n}) => async dispatch => {\n  dispatch({\n    type: POST_TYPES.DELETE_POST,\n    payload: post\n  });\n\n  try {\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token); // todo notification\n\n    const msg = {\n      id: post._id,\n      text: \"Added a new post.\",\n      recipients: res.data.newPost.user.followers,\n      url: `/post/${post._id}`\n    };\n    dispatch(removeNotify({\n      msg,\n      auth,\n      socket\n    }));\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const reportPost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const reportExist = post.reports.find(report => report === auth.user._id);\n\n  if (reportExist && reportExist.length > 0) {\n    return dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: \"You have already reported this post.\"\n      }\n    });\n  }\n\n  const newPost = { ...post\n  };\n  newPost.reports.push(auth.user._id);\n  dispatch({\n    type: POST_TYPES.REPORT_POST,\n    payload: newPost\n  });\n\n  try {\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        success: res.data.msg\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const savePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: [...auth.user.saved, post._id]\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};\nexport const unSavePost = ({\n  post,\n  auth\n}) => async dispatch => {\n  const newUser = { ...auth.user,\n    saved: auth.user.saved.filter(id => id !== post._id)\n  };\n  dispatch({\n    type: GLOBALTYPES.AUTH,\n    payload: { ...auth,\n      user: newUser\n    }\n  });\n\n  try {\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\n  } catch (err) {\n    dispatch({\n      type: GLOBALTYPES.ALERT,\n      payload: {\n        error: err.response.data.msg\n      }\n    });\n  }\n};","map":{"version":3,"sources":["E:/dasty_work_file/web/dastyco/client/src/redux/actions/postAction.js"],"names":["GLOBALTYPES","postDataAPI","getDataAPI","patchDataAPI","deleteDataAPI","imageUpload","createNotify","removeNotify","POST_TYPES","CREATE_POST","LOADING_POST","GET_POSTS","UPDATE_POST","GET_POST","DELETE_POST","REPORT_POST","SAVE_POST","createPost","content","contentsub","community","images","auth","socket","dispatch","media","type","ALERT","payload","loading","length","res","token","data","newPost","user","msg","id","_id","text","recipients","followers","url","image","err","error","response","getPosts","page","updatePost","status","imgNewUrl","filter","img","imgOldUrl","success","likePost","post","likes","emit","unLikePost","like","likeleftPost","likelefts","unLikeleftPost","likeleft","likerightPost","likerights","unLikerightPost","likeright","getPost","detailPost","every","deletePost","reportPost","reportExist","reports","find","report","push","savePost","newUser","saved","AUTH","unSavePost"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from \"./globalTypes\";\r\nimport {\r\n  postDataAPI,\r\n  getDataAPI,\r\n  patchDataAPI,\r\n  deleteDataAPI,\r\n} from \"../../utils/fetchData\";\r\nimport { imageUpload } from \"../../utils/imageUpload\";\r\nimport { createNotify, removeNotify } from \"./notifyAction\";\r\n\r\nexport const POST_TYPES = {\r\n  CREATE_POST: \"CREATE_POST\",\r\n  LOADING_POST: \"LOADING_POST\",\r\n  GET_POSTS: \"GET_POSTS\",\r\n  UPDATE_POST: \"UPDATE_POST\",\r\n  GET_POST: \"GET_POST\",\r\n  DELETE_POST: \"DELETE_POST\",\r\n  REPORT_POST: \"REPORT_POST\",\r\n  SAVE_POST: \"SAVE_POST\",\r\n};\r\n\r\nexport const createPost = ({\r\n  content,\r\n  contentsub,\r\n  community,\r\n  images,\r\n  auth,\r\n  socket,\r\n}) => async (dispatch) => {\r\n  let media = [];\r\n\r\n  try {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n\r\n    if (images.length > 0) {\r\n      media = await imageUpload(images);\r\n    }\r\n\r\n    const res = await postDataAPI(\r\n      \"posts\",\r\n      { content, contentsub, community, images: media },\r\n      auth.token\r\n    );\r\n\r\n    dispatch({\r\n      type: POST_TYPES.CREATE_POST,\r\n      payload: { ...res.data.newPost, user: auth.user },\r\n    });\r\n\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: false } });\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: res.data.newPost._id,\r\n      text: \"Added a new post.\",\r\n      recipients: res.data.newPost.user.followers,\r\n      url: `/post/${res.data.newPost._id}`,\r\n      content,\r\n      contentsub,\r\n      community,\r\n      image: media[0].url,\r\n    };\r\n\r\n    dispatch(createNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const getPosts = (token) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: true });\r\n    const res = await getDataAPI(\"posts\", token);\r\n    dispatch({ type: POST_TYPES.GET_POSTS, payload: { ...res.data, page: 2 } });\r\n\r\n    dispatch({ type: POST_TYPES.LOADING_POST, payload: false });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const updatePost = ({\r\n  content,\r\n  contentsub,\r\n  community,\r\n  images,\r\n  auth,\r\n  status,\r\n}) => async (dispatch) => {\r\n  let media = [];\r\n  const imgNewUrl = images.filter((img) => !img.url);\r\n  const imgOldUrl = images.filter((img) => img.url);\r\n  if (\r\n    status.content === content &&\r\n    status.contentsub === contentsub &&\r\n    status.community === community &&\r\n    imgNewUrl.length === 0 &&\r\n    imgOldUrl.length === status.images.length\r\n  ) {\r\n    return;\r\n  }\r\n  try {\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { loading: true } });\r\n    if (imgNewUrl.length > 0) {\r\n      media = await imageUpload(imgNewUrl);\r\n    }\r\n    const res = await patchDataAPI(\r\n      `post/${status._id}`,\r\n      { content, contentsub, community, images: [...imgOldUrl, ...media] },\r\n      auth.token\r\n    );\r\n\r\n    dispatch({ type: POST_TYPES.UPDATE_POST, payload: res.data.newPost });\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const likePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = { ...post, likes: [...post.likes, auth.user] };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"likePost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/like`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Liked your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n      content: post.content,\r\n      contentsub: post.contentsub,\r\n      community: post.community,\r\n      image: post.images[0].url,\r\n    };\r\n\r\n    dispatch(createNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const unLikePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = {\r\n    ...post,\r\n    likes: post.likes.filter((like) => like._id !== auth.user._id),\r\n  };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"unLikePost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/unlike`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Liked your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const likeleftPost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = { ...post, likelefts: [...post.likelefts, auth.user] };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"likeleftPost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/likeleft`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Likeleftd your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n      content: post.content,\r\n      contentsub: post.contentsub,\r\n      community: post.community,\r\n      image: post.images[0].url,\r\n    };\r\n\r\n    dispatch(createNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const unLikeleftPost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = {\r\n    ...post,\r\n    likelefts: post.likelefts.filter(\r\n      (likeleft) => likeleft._id !== auth.user._id\r\n    ),\r\n  };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"unLikeleftPost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/unlikeleft`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Likeleftd your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const likerightPost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = { ...post, likerights: [...post.likerights, auth.user] };\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"likerightPost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/likeright`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Likerightd your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n      content: post.content,\r\n      contentsub: post.contentsub,\r\n      community: post.community,\r\n      image: post.images[0].url,\r\n    };\r\n\r\n    dispatch(createNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const unLikerightPost = ({ post, auth, socket }) => async (dispatch) => {\r\n  const newPost = {\r\n    ...post,\r\n    likerights: post.likerights.filter(\r\n      (likeright) => likeright._id !== auth.user._id\r\n    ),\r\n  };\r\n\r\n  dispatch({ type: POST_TYPES.UPDATE_POST, payload: newPost });\r\n  socket.emit(\"unLikerightPost\", newPost);\r\n\r\n  try {\r\n    await patchDataAPI(`post/${post._id}/unlikeright`, null, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: auth.user._id,\r\n      text: \"Likerightd your post.\",\r\n      recipients: [post.user._id],\r\n      url: `/post/${post._id}`,\r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const getPost = ({ detailPost, id, auth }) => async (dispatch) => {\r\n  if (detailPost.every((post) => post._id !== id)) {\r\n    try {\r\n      const res = await getDataAPI(`post/${id}`, auth.token);\r\n      dispatch({ type: POST_TYPES.GET_POST, payload: res.data.post });\r\n    } catch (err) {\r\n      dispatch({\r\n        type: GLOBALTYPES.ALERT,\r\n        payload: {\r\n          error: err.response.data.msg,\r\n        },\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport const deletePost = ({ post, auth, socket }) => async (dispatch) => {\r\n  dispatch({ type: POST_TYPES.DELETE_POST, payload: post });\r\n\r\n  try {\r\n    const res = await deleteDataAPI(`post/${post._id}`, auth.token);\r\n\r\n    // todo notification\r\n    const msg = {\r\n      id: post._id,\r\n      text: \"Added a new post.\",\r\n      recipients: res.data.newPost.user.followers,\r\n      url: `/post/${post._id}`,\r\n    };\r\n\r\n    dispatch(removeNotify({ msg, auth, socket }));\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const reportPost = ({ post, auth }) => async (dispatch) => {\r\n  const reportExist = post.reports.find((report) => report === auth.user._id);\r\n\r\n  if (reportExist && reportExist.length > 0) {\r\n    return dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: { error: \"You have already reported this post.\" },\r\n    });\r\n  }\r\n  const newPost = { ...post };\r\n  newPost.reports.push(auth.user._id);\r\n\r\n  dispatch({ type: POST_TYPES.REPORT_POST, payload: newPost });\r\n\r\n  try {\r\n    const res = await patchDataAPI(`post/${post._id}/report`, null, auth.token);\r\n    dispatch({ type: GLOBALTYPES.ALERT, payload: { success: res.data.msg } });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const savePost = ({ post, auth }) => async (dispatch) => {\r\n  const newUser = { ...auth.user, saved: [...auth.user.saved, post._id] };\r\n\r\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n  try {\r\n    await patchDataAPI(`savePost/${post._id}`, null, auth.token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const unSavePost = ({ post, auth }) => async (dispatch) => {\r\n  const newUser = {\r\n    ...auth.user,\r\n    saved: auth.user.saved.filter((id) => id !== post._id),\r\n  };\r\n\r\n  dispatch({ type: GLOBALTYPES.AUTH, payload: { ...auth, user: newUser } });\r\n\r\n  try {\r\n    await patchDataAPI(`unSavePost/${post._id}`, null, auth.token);\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GLOBALTYPES.ALERT,\r\n      payload: {\r\n        error: err.response.data.msg,\r\n      },\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}